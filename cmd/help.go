package cmd

import (
	"fmt"

	"jvm/ui"
	"jvm/utils"
)

func ShowHelp() {
	ui.ShowBanner()
	fmt.Println("Java Version Manager helps you explore available OpenJDK releases across providers.")
	fmt.Println("It selects one recommended version per major tag (e.g., 8, 11, 17...) using the following priority:")
	fmt.Println(" " + utils.ColorText("[LTS]", utils.BrightGreen) + " LTS availability (Long-Term Support)")
	fmt.Println(" " + utils.ColorText("[STATS]", utils.BrightYellow) + " Most-used or popular release")
	fmt.Println(" " + utils.ColorText("[LATEST]", utils.BrightCyan) + " Latest patch version")
	fmt.Println("")

	fmt.Println(utils.SectionText("[COMMANDS] AVAILABLE COMMANDS:"))
	fmt.Println("─────────────────────")
	fmt.Println("  jvm remote-list (rl)                   # Show recommended versions (default: Adoptium)")
	fmt.Println("  jvm remote-list --provider=azul        # Specify provider (adoptium|azul|liberica|private)")
	fmt.Println("  jvm remote-list --all                  # Show versions from all providers")
	fmt.Println("  jvm remote-list --latest               # Show only the latest version")
	fmt.Println("  jvm remote-list --major-only           # Show only major releases (e.g. 17.0.0)")
	fmt.Println("  jvm remote-list --jdk=17               # Filter only a specific version")
	fmt.Println("  jvm remote-list --lts-only             # Show only LTS versions")
	fmt.Println("")
	fmt.Println(utils.SectionText("[DOWNLOAD] JDK DOWNLOAD:"))
	fmt.Println("────────────────")
	fmt.Println("  jvm download (dl) <version>            # Download JDK version to ~/.jvm/versions")
	fmt.Println("  jvm download 17 --provider=adoptium    # Download from specific provider")
	fmt.Println("  jvm download 21 --output=./my-jdks     # Download to custom directory")
	fmt.Println("")
	fmt.Println(utils.SectionText("[MANAGE] JDK MANAGEMENT:"))
	fmt.Println("─────────────────")
	fmt.Println("  jvm list (l)                           # Show installed JDK versions")
	fmt.Println("  jvm use (u) <version>                  # Set JDK version as active (JAVA_HOME)")
	fmt.Println("")
	fmt.Println(utils.SectionText("[SHELL] SHELL COMPLETION:"))
	fmt.Println("──────────────────")
	fmt.Println("  jvm completion                         # Generate bash completion script")
	fmt.Println("  jvm completion install                 # Install completion to ~/.bashrc")
	fmt.Println("")
	fmt.Println(utils.SectionText("[TOOLS] SYSTEM TOOLS:"))
	fmt.Println("───────────────")
	fmt.Println("  jvm fix-path (fp)                      # Remove duplicate PATH entries")
	fmt.Println("  jvm init                               # Initialize JVM environment variables")
	fmt.Println("")
	fmt.Println(utils.SectionText("[PRIVATE] PRIVATE REPOSITORY CONFIGURATION:"))
	fmt.Println("───────────────────────────────────")
	fmt.Println("  jvm configure-private (cp) <endpoint> [token]  # Configure enterprise repository")
	fmt.Println("  jvm config-show (cs)                           # Show current configuration")
	fmt.Println("  jvm config-reset (cr)                          # Remove private configuration")
	fmt.Println("")
	fmt.Println(utils.SectionText("[HELP] HELP:"))
	fmt.Println("─────────")
	fmt.Println("  jvm --help, -h, help                   # Show this help message")
	fmt.Println("")
	fmt.Println(utils.ExamplesText("PRACTICAL EXAMPLES:"))
	fmt.Println("──────────────────────")
	fmt.Println("  jvm rl --provider=azul --jdk=21")
	fmt.Println("  jvm remote-list --all --lts-only")
	fmt.Println("  jvm cp https://nexus.company.com/api/jdk token123")
	fmt.Println("  jvm cs")
	fmt.Println("  jvm completion install                 # Enable tab completion")
	fmt.Println("  jvm dl 17                              # Then use: jvm <Tab> to see commands")
}
